{"version":3,"sources":["components/Info.js","components/Timer.js","components/TimerResults.js","components/App.js","reportWebVitals.js","index.js"],"names":["Info","state","class_name","handleClick","setState","this","className","onClick","Component","Timer","props","minutes","seconds","TimerResults","button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAoCeA,E,4MA/BbC,MAAQ,CACNC,YAAY,G,EAGdC,YAAc,WACZ,EAAKC,SAAS,CACZF,YAAa,EAAKD,MAAMC,c,4CAI5B,WAAU,IACAA,EAAeG,KAAKJ,MAApBC,WACR,OACE,sBAAKI,UAAU,eAAf,UACE,cAAC,IAAD,CAAaA,UAAU,YAAYC,QAASF,KAAKF,cACjD,sBAAKG,UAAWJ,EAAa,cAAgB,YAA7C,UACE,cAAC,IAAD,CAASI,UAAU,YAAYC,QAASF,KAAKF,cAC7C,oBAAIG,UAAU,mBAAd,6CACA,mBAAGA,UAAU,qBAAb,6W,GAnBSE,aCgBJC,EAlBD,SAACC,GACb,IAAMC,EAAU,KACVC,EAAU,KAEhB,OACE,sBAAKN,UAAU,gBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,4CACA,oBAAGA,UAAU,QAAb,UACkCK,EADlC,IAEkCC,QAGpC,qBAAKN,UAAU,qB,cC0BNO,E,4MAlCbZ,MAAQ,CACNa,QAAQ,G,EAGVX,YAAc,SAACO,GACb,EAAKN,SAAS,CACZU,QAAS,EAAKb,MAAMa,U,4CAIxB,WACE,OACE,sBAAKR,UAAU,uBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAAUA,UAAU,gBACpB,cAAC,IAAD,CAAUA,UAAU,gBACpB,cAAC,IAAD,CAAUA,UAAU,gBACpB,cAAC,IAAD,CAAUA,UAAU,mBAEtB,qBAAKA,UAAU,aAAf,SACE,uDAEF,qBAAKA,UAAU,QAAQC,QAASF,KAAKF,YAArC,SACGE,KAAKJ,MAAMa,OACV,cAAC,IAAD,CAAeR,UAAU,cAEzB,cAAC,IAAD,CAAcA,UAAU,wB,GA3BTE,a,wBCaZO,MAVf,WACE,OACE,sBAAKT,UAAU,UAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.87da85e7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { TiInfoLarge } from \"react-icons/ti\";\r\nimport { IoClose } from \"react-icons/io5\";\r\n\r\nclass Info extends Component {\r\n  state = {\r\n    class_name: true,\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      class_name: !this.state.class_name,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { class_name } = this.state;\r\n    return (\r\n      <div className=\"info_wrapper\">\r\n        <TiInfoLarge className=\"info_icon\" onClick={this.handleClick} />\r\n        <div className={class_name ? \"active_info\" : \"info_area\"}>\r\n          <IoClose className=\"close_btn\" onClick={this.handleClick} />\r\n          <h2 className=\"pomodoro_info_h1\">What is the pomodoro technique?</h2>\r\n          <p className=\"pomodoro_info_text\">\r\n            The Pomodoro Technique is a time management system that encourages\r\n            people to work with the time they haveâ€”rather than against it. Using\r\n            this method, you break your workday into 25-minute chunks separated\r\n            by five-minute breaks. These intervals are referred to as pomodoros.\r\n            After about four pomodoros, you take a longer break 15 minutes.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Timer = (props) => {\r\n  const minutes = \"10\";\r\n  const seconds = \"20\";\r\n\r\n  return (\r\n    <div className=\"timer_wrapper\">\r\n      <div className=\"time\">\r\n        <p>Pomodoro #2</p>\r\n        <p className=\"clock\">\r\n          {minutes <= 9 ? \"0\" + minutes : minutes}:\r\n          {seconds <= 9 ? \"0\" + seconds : seconds}\r\n        </p>\r\n      </div>\r\n      <div className=\"progress_bar\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { GiTomato } from \"react-icons/gi\";\r\nimport { CgPlayButtonO } from \"react-icons/cg\";\r\nimport { CgPlayPauseO } from \"react-icons/cg\";\r\n\r\nclass TimerResults extends Component {\r\n  state = {\r\n    button: true,\r\n  };\r\n\r\n  handleClick = (props) => {\r\n    this.setState({\r\n      button: !this.state.button,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"timer_result_wrapper\">\r\n        <div className=\"tomato_icons\">\r\n          <GiTomato className=\"tomato_icon\" />\r\n          <GiTomato className=\"tomato_icon\" />\r\n          <GiTomato className=\"tomato_icon\" />\r\n          <GiTomato className=\"tomato_icon\" />\r\n        </div>\r\n        <div className=\"timer_text\">\r\n          <p>Focus for 25 minutes</p>\r\n        </div>\r\n        <div className=\"icons\" onClick={this.handleClick}>\r\n          {this.state.button ? (\r\n            <CgPlayButtonO className=\"play_icon\" />\r\n          ) : (\r\n            <CgPlayPauseO className=\"pause_icon\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimerResults;\r\n","import React from \"react\";\nimport Info from \"./Info\";\nimport Timer from \"./Timer\";\nimport TimerResult from \"./TimerResults\";\nimport \"./TimerResults.css\";\nimport \"./Timer.css\";\nimport \"./Info.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Info />\n      <Timer />\n      <TimerResult />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}